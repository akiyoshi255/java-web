<?xml version="1.0" encoding="UTF-8" ?>
<project name="web-spa-sample" default="build" basedir=".">
    <!-- プロジェクトプロパティを読み込む -->
    <property file="./build.properties"/>

    <!-- カバレージツール(cobertura)のタスクの設定 -->
    <property name="tools.dir" value="tools"/>
    <property name="cobertura.home" value="${tools.dir}/cobertura-2.1.1"/>
    <path id="cobertura.classpath">
        <fileset dir="${cobertura.home}">
            <include name="cobertura-2.1.1.jar"/>
            <include name="lib/**/*.jar"/>
        </fileset>
    </path>
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

    <!-- 静的チェック(checkstyle)のタスクの設定 -->
    <property name="checkstyle.home" value="${tools.dir}/checkstyle-6.14.1-all"/>
    <taskdef resource  ="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
             classpath ="${checkstyle.home}"/> 

    <!-- 静的チェック(findbugs)のタスクの設定 -->
    <property name="findbugs.home" value="${tools.dir}/findbugs-3.0.1" />
    <taskdef name      = "findbugs"
             classname = "edu.umd.cs.findbugs.anttask.FindBugsTask"
             classpath = "${findbugs.home}/lib/findbugs-ant.jar"/>

	<!-- プロジェクトに必要なディレクトリを作成する。 -->
    <target name="make-project">
        <!-- Javaプログラム開発用ディレクトリ -->
        <mkdir dir="${src.main.java.dir}"/>
    	<mkdir dir="${src.test.java.dir}"/>
        <mkdir dir="${lib.compile.dir}"/>
        <mkdir dir="${lib.provided.dir}"/>
        <mkdir dir="${lib.test.dir}"/>
        <!-- Webアプリケーション開発用ディレクトリ -->
        <mkdir dir="${src.main.webapp.dir}"/>
        <mkdir dir="${src.test.webapp.dir}"/>
    </target>

    <!-- プロジェクトに必要なディレクトリを削除する。 -->
    <!--
    <target name="delete-project">
        <delete verbose="${verbose}">
            <dirset dir="${basedir}">
                <include name="**/*"/>
            </dirset>
        </delete>
    </target>
    -->

    <!-- メインプログラムのコンパイルと実行に必要なライブラリのファイルセット定義 -->
    <path id="lib.compile">
        <fileset dir="${lib.compile.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- メインプログラムのコンパイルと実行に必要だが、WARには含めないライブラリのファイルセット定義 -->
    <path id="lib.provided">
        <fileset dir="${lib.provided.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- テストプログラムのコンパイルと実行に必要なライブラリのファイルセット定義 -->
    <path id="lib.test">
        <fileset dir="${lib.test.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- メインプログラムコンパイル時のクラスパス -->
    <path id="compile.main.classpath">
        <path refid="lib.compile"/>
        <path refid="lib.provided"/>
    </path>
 
    <!-- テストプログラムコンパイル時のクラスパス -->
    <path id="compile.test.classpath">
        <pathelement path="${target.main.classes.dir}"/>
        <path refid="lib.compile"/>
        <path refid="lib.provided"/>
        <path refid="lib.test"/>
    </path>

    <!-- テストプログラムコンパイル時のクラスパス -->
    <path id="run.test.classpath">
        <pathelement path="${target.main.classes.instrument.dir}"/>
        <pathelement path="${target.main.classes.dir}"/>
        <pathelement path="${target.test.classes.dir}"/>
        <path refid="lib.compile"/>
        <path refid="lib.provided"/>
        <path refid="lib.test"/>
        <path refid="cobertura.classpath"/>
    </path>

    <!-- メインプログラムのコンパイル -->
    <target name="compile-main">
        <mkdir dir="${target.main.classes.dir}"/>
        <copy todir="${target.main.classes.dir}">
            <fileset dir="${src.main.java.dir}">
                <include name="**/*"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <javac compiler = "${javac.compiler}"
               source   = "${javac.source}"
               target   = "${javac.target}"
               encoding = "${encoding}"
               debug    = "${javac.debug}"
               verbose  = "${verbose}"
               srcdir   = "${src.main.java.dir}"
               includes = "${src.main.java.includes}"
               excludes = "${src.main.java.excludes}"
               destdir  = "${target.main.classes.dir}"
               classpathref="compile.main.classpath"
               includeAntRuntime="no"/>
    </target>

    <!-- メインプログラムのJavaDocの作成 -->
    <target name="javadoc-main" depends="compile-main">
        <delete dir="${target.main.javadoc.dir}" />
        <mkdir  dir="${target.main.javadoc.dir}" />
        <javadoc destdir="${target.main.javadoc.dir}" encoding="${encoding}">
            <fileset dir      = "${src.main.java.dir}" 
                     includes = "${src.main.java.includes}"
                     excludes = "${src.main.java.excludes}"/>
            <classpath refid="compile.main.classpath"/>
        </javadoc>
    </target>

    <!-- テストプログラムのコンパイル -->
    <target name="compile-test" depends="compile-main">
        <mkdir dir="${target.test.classes.dir}"/>
        <copy todir="${target.test.classes.dir}">
            <fileset dir="${src.test.java.dir}">
                <include name="**/*"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <javac compiler = "${javac.compiler}"
               source   = "${javac.source}"
               target   = "${javac.target}"
               encoding = "${encoding}"
               debug    = "on"
               verbose  = "${verbose}"
               srcdir   = "${src.test.java.dir}"
               includes = "${src.test.java.includes}"
               excludes = "${src.test.java.excludes}"
               destdir  = "${target.test.classes.dir}"
               classpathref="compile.test.classpath"
               includeAntRuntime="no"/>
    </target>

    <!-- テストプログラムのJavaDocの作成 -->
    <target name="javadoc-test" depends="compile-test">
        <delete dir="${target.test.javadoc.dir}" />
        <mkdir  dir="${target.test.javadoc.dir}" />
        <javadoc destdir="${target.test.javadoc.dir}" encoding="${encoding}">
            <fileset dir      = "${src.test.java.dir}"
                     includes = "${src.test.java.includes}"
                     excludes = "${src.test.java.excludes}"/>
            <classpath refid="compile.test.classpath"/>
        </javadoc>
    </target>

    <!-- クラスファイルへのカバレージ取得コードの埋め込み -->
    <target name="instrument-main" depends="compile-main">
        <mkdir  dir="${target.test.coverage.data.dir}" />
        <delete dir="${target.test.coverage.data.dir}/cobertura.ser" />
        <delete dir="${target.main.classes.instrument.dir}"/>
        <cobertura-instrument
            datafile = "${target.test.coverage.data.dir}/cobertura.ser"
            todir    = "${target.main.classes.instrument.dir}">
            <fileset dir="${target.main.classes.dir}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>
    </target>

    <!-- テストプログラムの実行 -->
    <target name="run-test" depends="compile-test, instrument-main">
        <delete dir="${target.test.run.dir}" />
        <mkdir  dir="${target.test.run.dir}" />
        <delete dir="${target.test.results.dir}" />
        <mkdir  dir="${target.test.results.dir}" />

        <junit fork="yes" dir="${target.test.run.dir}" printsummary="yes">
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/${target.test.coverage.data.dir}/cobertura.ser"/>
            <classpath refid="run.test.classpath"/>
            <formatter type="xml"/>
            <batchtest todir="${target.test.results.dir}">
                <fileset dir="${target.test.classes.dir}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- テスト結果のレポート作成(HTML形式) -->
    <target name="report-test-results" depends="run-test">
        <delete dir="${target.test.results.report.dir}" />
        <mkdir  dir="${target.test.results.report.dir}" />
        <junitreport todir="${target.test.results.report.dir}">
            <report format="frames" todir="${target.test.results.report.dir}/html" />
            <fileset dir="${target.test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
        </junitreport>
    </target>

    <!-- カバレージ結果のレポート作成 -->
    <target name="report-test-coverage" depends="run-test">
        <cobertura-report
            format   = "html" 
            datafile = "${target.test.coverage.data.dir}/cobertura.ser"
            destdir  = "${target.test.coverage.report.dir}"
            encoding = "utf-8">
            <fileset dir="${src.main.java.dir}">
                <include name = "${src.main.java.includes}"/>
                <exclude name = "${src.main.java.excludes}"/>
            </fileset>
        </cobertura-report>
    </target>

    <!-- 静的チェック(checkstyle)の実行 -->
    <target name="inspect-checkstyle">
        <delete dir="${target.inspection.checkstyle.report.dir}"/>
        <mkdir  dir="${target.inspection.checkstyle.report.dir}"/>

        <checkstyle config="${checkstyle.home}/sun_checks.xml" failOnViolation="no">
            <fileset dir="${src.main.java.dir}">
                <include name = "${src.main.java.includes}"/>
                <exclude name = "${src.main.java.excludes}"/>
            </fileset>
            <formatter type="plain" toFile="${target.inspection.checkstyle.report.dir}/checkstyle-result.txt"/>
        </checkstyle>
    </target>

    <!-- 静的チェック(findbugs)の実行 -->
    <target name="inspect-findbugs">
        <delete dir="${target.inspection.findbugs.report.dir}"/>
        <mkdir  dir="${target.inspection.findbugs.report.dir}"/>

        <findbugs home       = "${findbugs.home}"
                  output     = "html"
                  outputFile = "${target.inspection.findbugs.report.dir}/findbugs-result.html">
            <sourcePath path="${src.main.java.dir}" />
            <class location="${target.main.classes.dir}" />
        </findbugs>
    </target>

    <!-- 静的チェックの実行 -->
    <target name="inspect" depends="inspect-checkstyle, inspect-findbugs"/>

    <!-- JARファイルの作成 -->
	<target name="pack-jar" depends="compile-main">
        <jar destfile = "${target.main.jar.file}"
             basedir  = "${target.main.classes.dir}"
             manifest = "${target.main.classes.dir}/META-INF/MANIFEST.MF"
             encoding = "${encoding}"
             update   = "false" />
    </target>

    <!-- JARファイルの解凍(作成されたJARファイルの中身を確認した場合に使用する) -->
	<target name="unpack-jar" depends="pack-jar">
        <unjar src       = "${target.main.jar.file}"
               dest      = "${target.main.jar.unpack.dir}/"
               overwrite = "true"/> 
    </target>

    <!-- WARファイルの作成 -->
	<target name="pack-war" depends="compile-main">
        <war destfile = "${target.main.war.file}"
             webxml   = "${src.main.webapp.dir}/WEB-INF/web.xml"
             encoding = "${encoding}"
             update   = "false">
            <fileset dir="${src.main.webapp.dir}" excludes="WEB-INF/web.xml,WEB-INF/lib/**,WEB-INF/classes/**"/>
            <classes dir="${target.main.classes.dir}"/>
            <lib dir="${lib.compile.dir}" includes="*.jar"/>
        </war>
    </target>

    <!-- WARファイルの解凍(作成されたWARファイルの中身を確認した場合に使用する) -->
	<target name="unpack-war" depends="pack-war">
        <unwar src       = "${target.main.war.file}"
               dest      = "${target.main.war.unpack.dir}/"
               overwrite = "true"/> 
    </target>

    <!-- リリースビルド(war) -->
    <target name="build" depends="pack-war, unpack-war, report-test-results, report-test-coverage, javadoc-main, javadoc-test"/>

    <!-- Tomcatのカスタムタスクの定義 -->
    <path id="tomcat.lib.classpath">
        <fileset dir="${tomcat.home.dir}/bin"> 
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${tomcat.home.dir}/lib"> 
            <include name="*.jar"/>
        </fileset>
    </path>
    <taskdef resource="org/apache/catalina/ant/catalina.tasks"
             classpathref="tomcat.lib.classpath"/>

    <!-- Tomcatが稼働しているVMの情報を表示する -->
    <target name="tomcat-vminfo">
        <vminfo
            url      = "${tomcat.manager.url}"
            username = "${tomcat.manager.username}"
            password = "${tomcat.manager.password}"/>
    </target>

    <!-- Tomcat上で発生したメモリリークを表示する -->
    <target name="tomcat-findleaks">
        <findleaks
            url      = "${tomcat.manager.url}"
            username = "${tomcat.manager.username}"
            password = "${tomcat.manager.password}"/>
    </target>

    <!-- Tomcat上のスレッド一覧を表示する -->
    <target name="tomcat-threaddump">
        <threaddump
            url      = "${tomcat.manager.url}"
            username = "${tomcat.manager.username}"
            password = "${tomcat.manager.password}"/>
    </target>

    <!-- Tomcat上のJNDIリソース一覧を表示する -->
    <target name="tomcat-resources">
        <resources
            url      = "${tomcat.manager.url}"
            username = "${tomcat.manager.username}"
            password = "${tomcat.manager.password}"/>
    </target>

    <!-- Tomcat上のWebアプリケーション一覧を表示する -->
    <target name="tomcat-list-webapp">
        <list
            url      = "${tomcat.manager.url}"
            username = "${tomcat.manager.username}"
            password = "${tomcat.manager.password}"/>
    </target>

    <!-- Tomcat上の状態を全て表示する -->
    <target name="tomcat-info" depends="tomcat-vminfo, tomcat-findleaks, tomcat-threaddump, tomcat-resources, tomcat-list-webapp"/>

    <!-- TomcatにWebアプリケーションをデプロイする -->
    <target name="tomcat-deploy-webapp" depends="pack-war">
        <deploy
            url      = "${tomcat.manager.url}"
            username = "${tomcat.manager.username}"
            password = "${tomcat.manager.password}"
            path     = "${webapp.context_path}"
            war      = "${target.main.war.file}"/>
    </target>

    <!-- TomcatからWebアプリケーションをアンデプロイする -->
    <target name="tomcat-undeploy-webapp">
        <undeploy
            url      = "${tomcat.manager.url}"
            username = "${tomcat.manager.username}"
            password = "${tomcat.manager.password}"
            path     = "${webapp.context_path}"/>
    </target>

    <!-- Tomcat上のWebアプリケーションを起動する -->
    <target name="tomcat-start-webapp">
        <start
            url      = "${tomcat.manager.url}"
            username = "${tomcat.manager.username}"
            password = "${tomcat.manager.password}"
            path     = "${webapp.context_path}"/>
    </target>

    <!-- Tomcat上のWebアプリケーションを停止する -->
    <target name="tomcat-stop-webapp">
        <stop
            url      = "${tomcat.manager.url}"
            username = "${tomcat.manager.username}"
            password = "${tomcat.manager.password}"
            path     = "${webapp.context_path}"/>
    </target>

    <!-- Tomcat上のWebアプリケーションをリロードする -->
    <target name="tomcat-reload-webapp">
        <reload
            url      = "${tomcat.manager.url}"
            username = "${tomcat.manager.username}"
            password = "${tomcat.manager.password}"
            path     = "${webapp.context_path}"/>
    </target>

    <!-- Tomcat上のWebアプリケーションのセッション一覧を表示する -->
    <target name="tomcat-sessions">
        <sessions
            url      = "${tomcat.manager.url}"
            username = "${tomcat.manager.username}"
            password = "${tomcat.manager.password}"
            path     = "${webapp.context_path}"/>
    </target>

    <!-- Web.xmlを検証する -->
    <target name="tomcat-validator">
        <validator path="${src.main.webapp.dir}"/>
    </target>

    <property name="tomcat.webapp.dir"  value="${tomcat.webapps.dir}/${webapp.context_path}"/>

    <!-- ローカルマシンのTomcat上に配備したWebアプリケーションのクラスを更新する -->
    <target name="sync-webapp-classes" depends="compile-main">
        <sync
            todir       = "${tomcat.webapp.dir}/WEB-INF/classes"
            overwrite   = "false"
            failonerror = "true"
            verbose     = "${verbose}">
            <fileset dir="${target.main.classes.dir}"/>
        </sync>
    </target>

    <!-- ローカルマシンのTomcat上に配備したWebアプリケーションのライブラリを更新する -->
    <target name="sync-webapp-lib">
        <sync
            todir       = "${tomcat.webapp.dir}/WEB-INF/lib"
            overwrite   = "false"
            failonerror = "true"
            verbose     = "${verbose}">
            <fileset dir="${lib.compile.dir}" includes="*.jar"/>
        </sync>
    </target>

    <!-- ローカルマシンのTomcat上に配備したWebアプリケーションの静的コンテンツを更新する -->
    <target name="sync-webapp-contents">
        <sync
            todir       = "${tomcat.webapp.dir}"
            overwrite   = "false"
            failonerror = "true"
            verbose     = "${verbose}">
            <fileset dir="${src.main.webapp.dir}" excludes="WEB-INF/lib/**,WEB-INF/classes/**"/>
        </sync>
    </target>

    <!-- ローカルマシンのTomcat上に配備したWebアプリケーションの内容を全て更新する -->
    <target name="sync-webapp" depends="sync-webapp-classes,sync-webapp-lib,sync-webapp-contents"/>

    <!-- ビルド時に生成したファイルを全て削除する。 -->
    <target name="clean">
        <delete dir ="${target.dir}" includeEmptyDirs="true" verbose="${verbose}"/>
    </target>
</project>
